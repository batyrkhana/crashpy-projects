Variable Are Labels
    Variable are better thought of as labels that can be assigned to values

2.1. Simple Message: Assign a mesage to a variable and then print that message
2.2. Simple Messages: assign a message to a variable and then print that message then change the value of the variable to a new message and print the new message

Strings

"This is a string"
'This is also a string'

Changing Case in a String with Methods
    name = "ada lovelace"
    print(name.title())
    the output will be the same string but fully capitalized
Methods:
    name.upper()
    name.lower()
    name.title()

Using Variables in Strings
    can be done with the help of    f strings
Adding Whitespace to Strings with Tabs or Newlines
    whitespace is any nonprinting characters usch as spaces, tabs, and end-of line symbols. 
    Whitespace can be used to organize my output so its easier for users to read
    To add a whitespace (indent) (you need to add a \t ):
        print("\tSomething")
    To add a newline(you need to add a \n ):
        print()
Stripping a whitespace
    .rstrip() method to get rid of a whitespace from the right
    .lstrip() method to get rid of a whitespace from the left
    .strip() method to get rid of a whitespace from both right and left
Removing a prefix/suffix example:
    .removeprefix('https://') method
    .removesuffix() method
Numbers
    Integers:
        Add:        2+3
        Subtract:   3-2
        Multiply:   2*3
        Divide:     3/2
        Exponents:  3 ** 2
Floats:
    Any number with a decimal point
        0.1 + 0.1
Integers and flaots:
    Dividing any two numbers will always result in a Floats
Underscores in Numbers:
    When writing long numbers, you can group digits using underscores to maek large numbers more readable
        universe_age = 14_000_000_000
    When printed, python only displays the digits with no underscores
Multiple Assignment:
    You can assign values to more than one variabke using a single line of code
    x, y, z = 0, 0, 0
        this means that the variables x, y, z are initialized as 0
Constants:
    A variable whose value stays the same throughotu teh life of a program
    ALL CAPITAL LETTERS INDICATE A VARIABLE SHOULD BE TREATED AS A CONSTANT AND NEVER CHANGED
    MAX_CONNECTIONS = 5000
Lists:
    A collection of items in a particular order
    Python uses brackets to indicate a list []
    favorite_books = ['irish revolution', 'napoleon', 'economics']
    if you print a list you get the list and the square brackets
        ['irish revolution', 'napoleon', 'economics']
Accessing Elements of a list: 
    to access an element in a list, write the name of the list followed by the index of the item enclosed in square brackets
    print(favorite_books[0])
        the return will be: irish revolution    
    you an use different methods on top
    print(favorite_books[0].title())
        the result will be Irish Revolution
    index positions start at 0 not at 1
    negative postion value will give the list item from the back of the list
Modifying Elements in a list:
    favorite_books = ['irish revolution', 'napoleon', 'economics']
    favorite_books[0] = 'american revolution'
Appending elements to the end of the list 
    .append() method
Inserting into a certain poition in a list
   .insert() method
To erase the item from a list   
    use del statement
        for example:
            del favorite_books[0] will delete the initial position in the list 
To take a value from a list and use it
    .pop([0]) method ; just replace 0 with some index in a list
Remove item by value: (if you do not know the position but know what to remove)
    .remove('motorcycle')
Sorting a list permanently with sort() method
    .sort() method to sort alphabetically
    .sort(reverse=True) method to sort alphabetically backwards
Sorting a list temporarily with sorted() method
    .sorted() method will let you display the list in a certain order but doesn't affec tthe actual order of the list
    .sorted(reverse=Trued) method to sort alphabetically backwards
Sorting a list in reverse order with reverse() method
    .reverse() method
Finding length of a list with len() function
    len([]) function will give you the length of the list
Example of a for loop
students = ['person1','person2', 'person3']
for student in students: 
    print(student)
for student in students: 
    print(f"{student.title()}, is a great student")
Using the range() function
    used to generate series of numbers
    Example:
        for value in range(1,5):
            print(value)
        Output will be:
        1
        2
        3
        4
        5
Using range() to make a list of numbers:
    the list() function could be used if wrapped around the range function to create a list of numbers
    numbers = list(range(1,6))
    print(numbers)
    the result will be:
        [1,2,3,4,5]
Simple Statistics with a list of numbers:
    min() function is used to find the minimum value
    max() function is used to find the maximum value
    sum() function is used to find the sum of all the values
List comprehension:
    squares = [value ** 2 for value in range(1,11)]
    print(squares)
Working with part of a list:

Slicing a list:
    Example:
        students = ['student1', 'student2', 'student3', 'student4', 'student5']
        print(students[0:3])
    Result:
        ['student1', 'student2', 'student3', 'student4']
if the first index is omitted then the slice will be automatically at the beginning of the List
    Example:
        students = ['student1', 'student2', 'student3', 'student4', 'student5']
        print(students[:4])
    Result:
        ['student1', 'student2', 'student3', 'student4']
Using a negative index:
    Example:
        students = ['student1', 'student2', 'student3', 'student4', 'student5']
        print(students[-3:])
    Result:
        ['student3', 'student4', 'student5']
Making a copy of a list:
    ommit both of the indexes so you should have [:]
    Example:
        my_books = ['book1', 'book2', 'book3']
        friend_books = my_books[:]
Tuples:
    List works well for storing collections of items that can change
    Tuples help to create a list that cannot change (i.e. immutable values, immutable list)
    Examples:
        building_height = (100, 75)
        print(building_height[0])
    If a tuple has to contain one element, it must include a trailing comma
        Example:
            my_t = (3,)
Writing over a tuple:
    Example:
        dimensions = (200,50)
        print("Original dimensions")
        for dimension in dimensions:
            print(dimension)
        dimensions = (300,100)
        print("New dimensions")
        for dimension in dimensions:
            print(dimension)
STYLING THE CODE, PLEASE READ THE PYTHON ENHANCEMENT PROPOSAL (PEP)

IF Statements example
    books = ['book1', 'book2', 'book3', 'book4']
    for book in books:
        if book == 'book1':
            print(book.upper())
        else:
            print(book.title())
Checking for equality
    = means assigning a value
    == means checking if a value is tSomething
Checking for inequality
    != checking if two values are not equal
    Example:
        if requested_topping != 'anchovies':    
        print("Hold the anchovies!")
Other comparisons:
    <=
    =>
    <
    >
Checking multiple conditions:
    (book_0 >= 21) and (book_1 >= 21)
Checking whether a value is in a list:
    Example:
        Input:
            'book' in requested_books
        Output: 
            false
Checking whether a value is not in a list 
    if 'book' not in requested_books
Boolean expressions:
    books_purchased = True
    books_sold = False
If Statements
if else Statements
If elif else statemetns
Python does not require an else block at teh end of an if-elif chain
Checking that a list is not empty:
    Example:
        books_requested = []
        if books_requested:
            tSomething
A simple dictionary:
    Example:
        book_1 = {'color': 'blue', 'pages': 100}
        print(book_1['color'])
key-value pair is a set of values associated with each Other
Adding New Key-Value pairs:
    book_0 = {'color': 'blue', 'pages': 100}
        print(book_1['color'])
    book_0['x_position'] = 0
    book_0['y_position'] = 40
    print(book_0)
    The result will be a dictionary with 4 values
Starting with an empty dictionary:
    Example:
        book_0 = {}
Modifying Values in a dictionary
    Example:
        alien_0['color'] = 'yellow'
        print(f"The alien is now {alien_0['color']}.")
Increasing the Value
    Example:
        alien_0['x_position'] = alien_0['x_position'] + x_increment
Deleting a key value pair:
    Example:    
        book_0 = {'color': 'orange', 'points': 5}
        del book_0['points']
Dictionary of similar objects
    Example:
        favorite_languages = {
                'jen': 'python',
                'obama': 'c'
        }
Using get() to Access Values:
    if a key doesn't exist you will get an error
    to make it look better and more understandable 
    use get() method
    Example:    
        alien_0 = {'color': 'green', 'speed': 'slow'}
        point_value = alien_0.get('points', 'no point value assigned.')
        print(point_value)
    this will return no point value assigned
    finished on pg 175